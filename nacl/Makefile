# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# GNU Makefile based on shared rules provided by the Native Client SDK.
# See README.Makefiles for more details.

VALID_TOOLCHAINS := pnacl newlib glibc clang-newlib linux

NACL_SDK_ROOT ?= $(abspath $(CURDIR)/../../..)

TARGET = manycast

include $(NACL_SDK_ROOT)/tools/common.mk


LIBS = ppapi_gles2 ppapi_cpp ppapi pthread

# Use gnu++11 instead of std++11 now because newlib's libc++ doesn't correctly
# support #include <sstream>.
# See https://groups.google.com/forum/#!topic/native-client-discuss/m2vOMflHJrQ
CFLAGS = -Wall -std=gnu++11 -I.

BASE_SOURCES = \
	base/big_endian.cc \
	base/log_impl.cc \
	base/logger.cc \
	base/os_compat_nacl.cc \
	base/rand_util.cc \
	base/rand_util_nacl.cc \
	base/strings/string16.cc \
	base/strings/stringprintf.cc \
	base/strings/string_piece.cc \
	base/time/clock.cc \
	base/time/default_clock.cc \
	base/time/default_tick_clock.cc \
	base/time/tick_clock.cc \
	base/time/time.cc \
	base/time/time_posix.cc

SOURCES = $(BASE_SOURCES)

SENDER_SOURCES = \
	logging/logging_defines.cc \
	logging/log_event_dispatcher.cc \
	logging/stats_event_subscriber.cc \
	net/pacing/paced_sender.cc \
	net/transport_sender.cc \
	net/udp_transport.cc \
	net/rtcp/rtcp_utility.cc \
	net/rtp/packet_storage.cc \
	net/rtp/rtp_packetizer.cc \
	net/rtp/rtp_sender.cc \
	sender/congestion_control.cc \
	sender/frame_sender.cc \
	sender/video_encoder.cc \
	sender/video_sender.cc \
	sharer_environment.cc \
	sharer_sender.cc

SOURCES += $(SENDER_SOURCES)

SOURCES += \
	common/clock_drift_smoother.cc \
	net/sharer_transport_config.cc \
	net/udp_listener.cc \
	net/rtcp/rtcp.cc \
	net/rtcp/rtcp_defines.cc \
	net/rtcp/rtcp_builder.cc \
	net/rtp/sharer_message_builder.cc \
	net/rtp/frame_buffer.cc \
	net/rtp/framer.cc \
	net/rtp/receiver_stats.cc \
	net/rtp/rtp.cc \
	net/rtp/rtp_receiver_defines.cc \
	receiver/decoder.cc \
	receiver/frame_receiver.cc \
	receiver/network_handler.cc \
	sharer_config.cc \
	main.cc

# Build rules generated by macros from common.mk:

$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))

# Apply Google coding style to everything except under base/.
# TODO: Add header files to SOURCES and use that instead of find as parameter
# to clang-format.
format:
	find . -name "*.cc" -o -name "*.h" | grep -v '^./base' | xargs clang-format -style=Google -i
